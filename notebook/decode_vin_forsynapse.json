{
	"name": "decode_vin_forsynapse",
	"properties": {
		"folder": {
			"name": "WADOL"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0d7c8fe3-aa18-4dd4-a78c-27a71dd791cb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/SynapseMgdVnet-Demo/providers/Microsoft.Synapse/workspaces/raysynapsemgdvnet/bigDataPools/SparkPool3",
				"name": "SparkPool3",
				"type": "Spark",
				"endpoint": "https://raysynapsemgdvnet.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## The cell below is from _setup_nhtsa.py_ file. It is included here for simplicity, so the script runs in one Notebook."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\"\"\"\r\n",
					"The order of the fields here is the order of the fields on SQL Server.\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"nhtsa_columns = [ 'DOL_VINGroup'\r\n",
					"      , 'DOL_ModelYear'\r\n",
					"      ,'Make'\r\n",
					"      ,'Model'\r\n",
					"      , 'ABS'\r\n",
					"      ,'ActiveSafetySysNote'\r\n",
					"      ,'AdaptiveCruiseControl'\r\n",
					"      ,'AdaptiveDrivingBeam'\r\n",
					"      ,'AdaptiveHeadlights'\r\n",
					"      ,'AdditionalErrorText'\r\n",
					"      ,'AirBagLocCurtain'\r\n",
					"      ,'AirBagLocFront'\r\n",
					"      ,'AirBagLocKnee'\r\n",
					"      ,'AirBagLocSeatCushion'\r\n",
					"      ,'AirBagLocSide'\r\n",
					"      ,'AutoReverseSystem'\r\n",
					"      ,'AutomaticPedestrianAlertingSound'\r\n",
					"      ,'AxleConfiguration'\r\n",
					"      ,'Axles'\r\n",
					"      ,'BasePrice'\r\n",
					"      ,'BatteryA'\r\n",
					"      ,'BatteryA_to'\r\n",
					"      ,'BatteryCells'\r\n",
					"      ,'BatteryInfo'\r\n",
					"      ,'BatteryKWh'\r\n",
					"      ,'BatteryKWh_to'\r\n",
					"      ,'BatteryModules'\r\n",
					"      ,'BatteryPacks'\r\n",
					"      ,'BatteryType'\r\n",
					"      ,'BatteryV'\r\n",
					"      ,'BatteryV_to'\r\n",
					"      ,'BedLengthIN'\r\n",
					"      ,'BedType'\r\n",
					"      ,'BlindSpotIntervention'\r\n",
					"      ,'BlindSpotMon'\r\n",
					"      ,'BodyCabType'\r\n",
					"      ,'BodyClass'\r\n",
					"      ,'BrakeSystemDesc'\r\n",
					"      ,'BrakeSystemType'\r\n",
					"      ,'BusFloorConfigType'\r\n",
					"      ,'BusLength'\r\n",
					"      ,'BusType'\r\n",
					"      ,'CAN_AACN'\r\n",
					"      ,'CIB'\r\n",
					"      ,'CashForClunkers'\r\n",
					"      ,'ChargerLevel'\r\n",
					"      ,'ChargerPowerKW'\r\n",
					"      ,'CoolingType'\r\n",
					"      ,'CurbWeightLB'\r\n",
					"      ,'CustomMotorcycleType'\r\n",
					"      ,'DaytimeRunningLight'\r\n",
					"      ,'DestinationMarket'\r\n",
					"      ,'DisplacementCC'\r\n",
					"      ,'DisplacementCI'\r\n",
					"      ,'DisplacementL'\r\n",
					"      ,'Doors'\r\n",
					"      ,'DriveType'\r\n",
					"      ,'DriverAssist'\r\n",
					"      ,'DynamicBrakeSupport'\r\n",
					"      ,'EDR'\r\n",
					"      ,'ESC'\r\n",
					"      ,'EVDriveUnit'\r\n",
					"      ,'ElectrificationLevel'\r\n",
					"      ,'EngineConfiguration'\r\n",
					"      ,'EngineCycles'\r\n",
					"      ,'EngineCylinders'\r\n",
					"      ,'EngineHP'\r\n",
					"      ,'EngineHP_to'\r\n",
					"      ,'EngineKW'\r\n",
					"      ,'EngineManufacturer'\r\n",
					"      ,'EngineModel'\r\n",
					"      ,'EntertainmentSystem'\r\n",
					"      ,'ErrorCode'\r\n",
					"      ,'ErrorText'\r\n",
					"      ,'ForwardCollisionWarning'\r\n",
					"      ,'FuelInjectionType'\r\n",
					"      ,'FuelTypePrimary'\r\n",
					"      ,'FuelTypeSecondary'\r\n",
					"      ,'GCWR'\r\n",
					"      ,'GCWR_to'\r\n",
					"      ,'GVWR'\r\n",
					"      ,'GVWR_to'\r\n",
					"      ,'KeylessIgnition'\r\n",
					"      ,'LaneCenteringAssistance'\r\n",
					"      ,'LaneDepartureWarning'\r\n",
					"      ,'LaneKeepSystem'\r\n",
					"      ,'LowerBeamHeadlampLightSource'\r\n",
					"      ,'MakeID'\r\n",
					"      ,'Manufacturer'\r\n",
					"      ,'ManufacturerId'\r\n",
					"      ,'ModelID'\r\n",
					"      ,'ModelYear'\r\n",
					"      ,'MotorcycleChassisType'\r\n",
					"      ,'MotorcycleSuspensionType'\r\n",
					"      ,'NCSABodyType'\r\n",
					"      ,'NCSAMake'\r\n",
					"      ,'NCSAMapExcApprovedBy'\r\n",
					"      ,'NCSAMapExcApprovedOn'\r\n",
					"      ,'NCSAMappingException'\r\n",
					"      ,'NCSAModel'\r\n",
					"      ,'NCSANote'\r\n",
					"      ,'NonLandUse'\r\n",
					"      ,'Note'\r\n",
					"      ,'OtherBusInfo'\r\n",
					"      ,'OtherEngineInfo'\r\n",
					"      ,'OtherMotorcycleInfo'\r\n",
					"      ,'OtherRestraintSystemInfo'\r\n",
					"      ,'OtherTrailerInfo'\r\n",
					"      ,'ParkAssist'\r\n",
					"      ,'PedestrianAutomaticEmergencyBraking'\r\n",
					"      ,'PlantCity'\r\n",
					"      ,'PlantCompanyName'\r\n",
					"      ,'PlantCountry'\r\n",
					"      ,'PlantState'\r\n",
					"      ,'PossibleValues'\r\n",
					"      ,'Pretensioner'\r\n",
					"      ,'RearAutomaticEmergencyBraking'\r\n",
					"      ,'RearCrossTrafficAlert'\r\n",
					"      ,'RearVisibilitySystem'\r\n",
					"      ,'SAEAutomationLevel'\r\n",
					"      ,'SAEAutomationLevel_to'\r\n",
					"      ,'SeatBeltsAll'\r\n",
					"      ,'SeatRows'\r\n",
					"      ,'Seats'\r\n",
					"      ,'SemiautomaticHeadlampBeamSwitching'\r\n",
					"      ,'Series'\r\n",
					"      ,'Series2'\r\n",
					"      ,'SteeringLocation'\r\n",
					"      ,'SuggestedVIN'\r\n",
					"      ,'TPMS'\r\n",
					"      ,'TopSpeedMPH'\r\n",
					"      ,'TrackWidth'\r\n",
					"      ,'TractionControl'\r\n",
					"      ,'TrailerBodyType'\r\n",
					"      ,'TrailerLength'\r\n",
					"      ,'TrailerType'\r\n",
					"      ,'TransmissionSpeeds'\r\n",
					"      ,'TransmissionStyle'\r\n",
					"      ,'Trim'\r\n",
					"      ,'Trim2'\r\n",
					"      ,'Turbo'\r\n",
					"      ,'VIN'\r\n",
					"      ,'ValveTrainDesign'\r\n",
					"      ,'VehicleDescriptor'\r\n",
					"      ,'VehicleType'\r\n",
					"      ,'WheelBaseLong'\r\n",
					"      ,'WheelBaseShort'\r\n",
					"      ,'WheelBaseType'\r\n",
					"      ,'WheelSizeFront'\r\n",
					"      ,'WheelSizeRear'\r\n",
					"      ,'Wheels'\r\n",
					"      ,'Windows']"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## The cell below is from the _decoding_env_config.py_ file."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import os\r\n",
					"\r\n",
					"databases = {\r\n",
					"    'vin_group_db': 'RPOdataTEAM', # server DB - vin table\r\n",
					"    'vin_group_server': 'ray-azuresql2-server.database.windows.net', # server host DB - vin table\r\n",
					"    'nhtsa_db': 'vPICList_lite_2023_07', # NHTSA source DB\r\n",
					"    'nhtsa_server': 'ray-azuresql2-server.database.windows.net', # NHTSA source host DB\r\n",
					"    'output_db': 'RPOdataTEAM', # output for Python results transformation\r\n",
					"    'output_server': 'ray-azuresql2-server.database.windows.net', # output for Python results.... host.\r\n",
					"    'output_table': 'NHTSA_Master' # output for Python results.... table. AKA NHTSA master table?\r\n",
					"}\r\n",
					"\r\n",
					"\"\"\"\r\n",
					"The configuration is set to decode against RAO's\r\n",
					"copy of NHTSA's database.\r\n",
					"\r\n",
					"\"\"\""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## The \"import setup_nhtsa\" and \"import decoding_env_config\" statements below have been commented out since we plugged-in that script directly into this Notebook."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# third party packages\r\n",
					"import sqlalchemy\r\n",
					"import pyodbc\r\n",
					"import pandas as pd\r\n",
					"import urllib\r\n",
					"import argparse # used by parse_args\r\n",
					"import sys\r\n",
					"import datetime\r\n",
					"import os\r\n",
					"\r\n",
					"# RAO files\r\n",
					"# import setup_nhtsa # RAO defined file, from columns on 5/22\r\n",
					"# import decoding_env_config as cfg # holds database info\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def parse_args(args):\r\n",
					"    # Setup reading arguments from command line\r\n",
					"    msg = \"Decodes VIN against NHTSA's database\"\r\n",
					"    parser = argparse.ArgumentParser(description = msg)\r\n",
					"    parser.add_argument('--decode_all_or_new', metavar='decode_all_or_new',\r\n",
					"                        choices=['all', 'new'],\r\n",
					"                        required=True,\r\n",
					"                        help='Specify which VIN Groups to decode: all, new. ')\r\n",
					"\r\n",
					"    return parser.parse_args(args)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_vin_groups(all_or_new, dbengine):\r\n",
					"    \"\"\"\r\n",
					"    Assumes VIN groups always stored in a table named DRIVESVINGroups*\r\n",
					"    Get the table name of the most recently created DRIVESVINGroups_YYYYMMDD.\r\n",
					"\tThis helps us pick up aborted runs or test runs.\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    print(\"RAY 2222\")\r\n",
					"\r\n",
					"    mostRecentVinGroups = pd.read_sql_query(\"SELECT top 1 name \\\r\n",
					"                                        FROM sys.tables \\\r\n",
					"                                        WHERE name like 'DRIVESVINGroups%' \\\r\n",
					"                                        ORDER BY create_date DESC\", con = dbengine)\r\n",
					"\r\n",
					"    \r\n",
					"    print(\"RAY 333\")\r\n",
					"\r\n",
					"    if(all_or_new == 'all'):\r\n",
					"        print('Getting VIN groups from ', mostRecentVinGroups.name[0])\r\n",
					"        query = \"SELECT DISTINCT VINGroup, ModelYear FROM \" + mostRecentVinGroups.name[0]\r\n",
					"    else:\r\n",
					"        print('Getting new VIN groups from ', mostRecentVinGroups.name[0])\r\n",
					"        query = \"SELECT DISTINCT vg.VINGroup, vg.ModelYear \\\r\n",
					"                FROM \" + mostRecentVinGroups.name[0] + \" AS vg \\\r\n",
					"                LEFT JOIN %s AS nr \\\r\n",
					"                    ON vg.VINGroup = nr.DOL_VINGroup \\\r\n",
					"                    AND vg.ModelYear = nr.DOL_ModelYear\\\r\n",
					"                WHERE nr.DOL_VINGroup IS NULL\" % databases['output_table']\r\n",
					"\r\n",
					"    vin_groups = {}\r\n",
					"    vin_groups['data'] = pd.read_sql_query(query, con = dbengine)\r\n",
					"    vin_groups['source'] = mostRecentVinGroups.name[0]\r\n",
					"\r\n",
					"    return vin_groups\r\n",
					"\r\n",
					"def same_merge(x): return ', '.join(x[x.notnull()].astype(str))\r\n",
					"    # helper to concatenate values from duplicate columns"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class VIN(object):\r\n",
					"    def __init__(self, vin, model_year):\r\n",
					"        self.vin = vin\r\n",
					"        self.model_year = model_year\r\n",
					"        self.db_decode = None\r\n",
					"        self.nhtsa_master_format = None\r\n",
					"        self.date_decoded = None\r\n",
					"\r\n",
					"    def decode_against_database(self, dbengine):\r\n",
					"        # decode against NHTSA's database\r\n",
					"        if int(self.model_year) >= 1981:\r\n",
					"            query = \"EXEC [dbo].[spVinDecode] @v = N'\" + self.vin + \"', @year = \" + self.model_year\r\n",
					"        else:\r\n",
					"            # some model years may not have been populated and are forced to low date year (1900)\r\n",
					"            query = \"EXEC [dbo].[spVinDecode] @v = N'\" + self.vin + \"'\"\r\n",
					"        self.db_decode = pd.read_sql_query(query, con = dbengine)\r\n",
					"        self.date_decoded = datetime.datetime.now().strftime('%Y%m%d %H:%M:%S')\r\n",
					"\r\n",
					"    def format_for_nhtsa_master(self):\r\n",
					"        # convert the long format returned by stored procedure to the wide format we use in NHTSA_Master\r\n",
					"        self.nhtsa_master_format = self.db_decode[[\"Code\", \"Value\"]].set_index('Code')\r\n",
					"        self.nhtsa_master_format = self.nhtsa_master_format.T # transpose\r\n",
					"        self.nhtsa_master_format['DOL_ModelYear'] = self.model_year\r\n",
					"        self.nhtsa_master_format['DOL_VINGroup'] = self.vin\r\n",
					"        self.nhtsa_master_format['Date_VINDecoded'] = self.date_decoded\r\n",
					"        self.nhtsa_master_format.reset_index(inplace=True, drop=True)\r\n",
					"        # next step deduplicates column names by effectively concatenating values from the duplicated columns\r\n",
					"        self.nhtsa_master_format = self.nhtsa_master_format.groupby(level=0, axis=1).apply(lambda x: x.apply(same_merge, axis=1))\r\n",
					"\r\n",
					"def write_to_database(list_of_individual_df, nhtsa_df_format, dbtable, dbengine):\r\n",
					"    # writing to database is an append\r\n",
					"    # there's no check on prior existence\r\n",
					"    tmp = pd.concat(list_of_individual_df, ignore_index=True)\r\n",
					"    vehicle_information = pd.concat([nhtsa_df_format, tmp])\r\n",
					"    vehicle_information.fillna(value='', inplace=True) # fields not returned will have empty string\r\n",
					"    vehicle_information.to_sql(dbtable, schema = 'dbo', con = dbengine, if_exists='append', index=False) # write to SQL server\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"def main():\r\n",
					"    # RAY - hard coding for now\r\n",
					"    # ['--decode_all_or_new', 'all']\r\n",
					"    arg_list = ['--decode_all_or_new', 'all']\r\n",
					"    \r\n",
					"    # parse command line arguments\r\n",
					"    # parser = parse_args(sys.argv[1:])\r\n",
					"    parser = parse_args(arg_list)\r\n",
					"\r\n",
					"    # connect to db with VIN groups\r\n",
					"    # RAY -params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + databases['vin_group_server'] + \";DATABASE=\" + databases['vin_group_db'])\r\n",
					"    # params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + databases['vin_group_server'] + \";DATABASE=\" + databases['vin_group_db'])\r\n",
					"    params = urllib.parse.quote_plus(\"DRIVER={ODBC+Driver+18+for+SQL+Server};SERVER=\" + databases['vin_group_server'] + \";DATABASE=\" + databases['vin_group_db']\r\n",
					"        + \";UID=sqladmin; PWD=abcd1234!\")\r\n",
					"\r\n",
					"\r\n",
					"    # ORIG - engine = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"    engine = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"    \r\n",
					"    # read in VIN groups\r\n",
					"    vin_groups_to_decode = get_vin_groups(parser.decode_all_or_new, engine)\r\n",
					"    engine.dispose() # dispose\r\n",
					"    print(\"%s VINs will be decoded\" % vin_groups_to_decode['data'].shape[0])\r\n",
					"\r\n",
					"    try:\r\n",
					"        # set up connections for decoding\r\n",
					"        params = urllib.parse.quote_plus(\"DRIVER={ODBC+Driver+18+for+SQL+Server};SERVER=\" + databases['nhtsa_server'] + \";DATABASE=\" + databases['nhtsa_db']\r\n",
					"            + \";UID=sqladmin; PWD=abcd1234!\")\r\n",
					"        engine_decoding = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"\r\n",
					"        # set up connection for writing output\r\n",
					"        params = urllib.parse.quote_plus(\"DRIVER={ODBC+Driver+18+for+SQL+Server};SERVER=\" + databases['output_server'] + \";DATABASE=\" + databases['output_db']\r\n",
					"            + \";UID=sqladmin; PWD=abcd1234!\")\r\n",
					"        engine_write = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params, use_setinputsizes=False)\r\n",
					"        nhtsa_df_format = pd.DataFrame(columns=nhtsa_columns) # initialize empty dataframe in the NHTSA_Master/Staging format\r\n",
					"\r\n",
					"        lst = [] # empty list to hold the decoding returns\r\n",
					"        for row in range(len(vin_groups_to_decode['data'])):\r\n",
					"            # decode VIN\r\n",
					"            this_vin = VIN(vin_groups_to_decode['data'].loc[row, 'VINGroup'], vin_groups_to_decode['data'].loc[row,'ModelYear'].astype(str))\r\n",
					"            print(this_vin.vin, this_vin.model_year)\r\n",
					"            print()\r\n",
					"            this_vin.decode_against_database(engine_decoding)\r\n",
					"            this_vin.format_for_nhtsa_master()\r\n",
					"            lst.append(this_vin.nhtsa_master_format) # store the list of returns\r\n",
					"\r\n",
					"            if row % 500 == 0 and row != 0:\r\n",
					"                # save result\r\n",
					"                write_to_database(lst, nhtsa_df_format, databases['output_table'], engine_write)\r\n",
					"                lst = []\r\n",
					"                print('Wrote ' + str(row+1) + ' VIN decodes')\r\n",
					"\r\n",
					"        # Write any remainder to db\r\n",
					"        write_to_database(lst, nhtsa_df_format, databases['output_table'], engine_write)\r\n",
					"        print('Wrote ' + str(row+1) + ' VIN decodes')\r\n",
					"\r\n",
					"        print('Source of VIN groups: ', vin_groups_to_decode['source'])\r\n",
					"\r\n",
					"    except Exception as ex:\r\n",
					"        template = \"An exception of type {0} occurred. Arguments:\\n{1!r}\"\r\n",
					"        message = template.format(type(ex).__name__, ex.args)\r\n",
					"        print(message)\r\n",
					"\r\n",
					"if __name__ == '__main__':\r\n",
					"    main()\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}