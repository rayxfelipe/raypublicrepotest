{
	"name": "Delta Lake Example",
	"properties": {
		"folder": {
			"name": "Examples"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e7e6cab5-7a78-4332-8480-4fb1038bf04b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/rg-synapse-demo-001/providers/Microsoft.Synapse/workspaces/synw-demoworkspace-001/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://synw-demoworkspace-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = spark.range(5, 10)\r\n",
					"data.write.format(\"delta\").mode(\"overwrite\").save(\"/tmp/delta-table\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"deltaTable = DeltaTable.forPath(spark, \"/tmp/delta-table\")\r\n",
					"\r\n",
					"# Update every even value by adding 100 to it\r\n",
					"deltaTable.update(\r\n",
					"  condition = expr(\"id % 2 == 0\"),\r\n",
					"  set = { \"id\": expr(\"id + 100\") })\r\n",
					"\r\n",
					"# Delete every even value\r\n",
					"deltaTable.delete(condition = expr(\"id % 2 == 0\"))\r\n",
					"\r\n",
					"# Upsert (merge) new data\r\n",
					"newData = spark.range(0, 20)\r\n",
					"\r\n",
					"deltaTable.alias(\"oldData\") \\\r\n",
					"  .merge(\r\n",
					"    newData.alias(\"newData\"),\r\n",
					"    \"oldData.id = newData.id\") \\\r\n",
					"  .whenMatchedUpdate(set = { \"id\": col(\"newData.id\") }) \\\r\n",
					"  .whenNotMatchedInsert(values = { \"id\": col(\"newData.id\") }) \\\r\n",
					"  .execute()\r\n",
					"\r\n",
					"deltaTable.toDF().show()"
				],
				"execution_count": 1
			}
		]
	}
}