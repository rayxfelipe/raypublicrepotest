{
	"name": "decode_vin2",
	"properties": {
		"folder": {
			"name": "WA DOL"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "616b124b-9638-4b37-82cd-874421bf99c5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# third party packages\r\n",
					"import sqlalchemy\r\n",
					"import pyodbc\r\n",
					"import pandas as pd\r\n",
					"import urllib\r\n",
					"import argparse # used by parse_args\r\n",
					"import sys\r\n",
					"import datetime\r\n",
					"import os\r\n",
					"\r\n",
					"# RAO files\r\n",
					"import setup_nhtsa # RAO defined file, from columns on 5/22\r\n",
					"import decoding_env_config as cfg # holds database info\r\n",
					"\r\n",
					"# Ray\r\n",
					"# import yaml\r\n",
					"# with open('environment.yml') as f:\r\n",
					"    # data = yaml.load(f, Loader=yaml.FullLoader)\r\n",
					"# print(data)\r\n",
					"\r\n",
					"def parse_args(args):\r\n",
					"    # Setup reading arguments from command line\r\n",
					"    msg = \"Decodes VIN against NHTSA's database\"\r\n",
					"    parser = argparse.ArgumentParser(description = msg)\r\n",
					"    parser.add_argument('--decode_all_or_new', metavar='decode_all_or_new',\r\n",
					"                        choices=['all', 'new'],\r\n",
					"                        required=True,\r\n",
					"                        help='Specify which VIN Groups to decode: all, new. ')\r\n",
					"\r\n",
					"    return parser.parse_args(args)\r\n",
					"\r\n",
					"def get_vin_groups(all_or_new, dbengine):\r\n",
					"    \"\"\"\r\n",
					"    Assumes VIN groups always stored in a table named DRIVESVINGroups*\r\n",
					"    Get the table name of the most recently created DRIVESVINGroups_YYYYMMDD.\r\n",
					"\tThis helps us pick up aborted runs or test runs.\r\n",
					"    \"\"\"\r\n",
					"    print(\"Ray 11\")\r\n",
					" \r\n",
					"    mostRecentVinGroups = pd.read_sql_query(\"SELECT top 1 name \\\r\n",
					"                                        FROM sys.tables \\\r\n",
					"                                        WHERE name like 'DRIVESVINGroups%' \\\r\n",
					"                                        ORDER BY create_date DESC\", con = dbengine)\r\n",
					"    \r\n",
					"    print(\"Ray 22\")\r\n",
					"\r\n",
					"    if(all_or_new == 'all'):\r\n",
					"        print('Getting VIN groups from ', mostRecentVinGroups.name[0])\r\n",
					"        query = \"SELECT DISTINCT VINGroup, ModelYear FROM \" + mostRecentVinGroups.name[0]\r\n",
					"    else:\r\n",
					"        print('Getting new VIN groups from ', mostRecentVinGroups.name[0])\r\n",
					"        query = \"SELECT DISTINCT vg.VINGroup, vg.ModelYear \\\r\n",
					"                FROM \" + mostRecentVinGroups.name[0] + \" AS vg \\\r\n",
					"                LEFT JOIN %s AS nr \\\r\n",
					"                    ON vg.VINGroup = nr.DOL_VINGroup \\\r\n",
					"                    AND vg.ModelYear = nr.DOL_ModelYear\\\r\n",
					"                WHERE nr.DOL_VINGroup IS NULL\" % cfg.databases['output_table']\r\n",
					"\r\n",
					"    vin_groups = {}\r\n",
					"    vin_groups['data'] = pd.read_sql_query(query, con = dbengine)\r\n",
					"    vin_groups['source'] = mostRecentVinGroups.name[0]\r\n",
					"    print(\"Ray 33\")\r\n",
					"    return vin_groups\r\n",
					"\r\n",
					"def same_merge(x): return ', '.join(x[x.notnull()].astype(str))\r\n",
					"    # helper to concatenate values from duplicate columns\r\n",
					"\r\n",
					"class VIN(object):\r\n",
					"    def __init__(self, vin, model_year):\r\n",
					"        self.vin = vin\r\n",
					"        self.model_year = model_year\r\n",
					"        self.db_decode = None\r\n",
					"        self.nhtsa_master_format = None\r\n",
					"        self.date_decoded = None\r\n",
					"\r\n",
					"    def decode_against_database(self, dbengine):\r\n",
					"        # decode against NHTSA's database\r\n",
					"        if int(self.model_year) >= 1981:\r\n",
					"            query = \"EXEC [dbo].[spVinDecode] @v = N'\" + self.vin + \"', @year = \" + self.model_year\r\n",
					"        else:\r\n",
					"            # some model years may not have been populated and are forced to low date year (1900)\r\n",
					"            query = \"EXEC [dbo].[spVinDecode] @v = N'\" + self.vin + \"'\"\r\n",
					"        self.db_decode = pd.read_sql_query(query, con = dbengine)\r\n",
					"        self.date_decoded = datetime.datetime.now().strftime('%Y%m%d %H:%M:%S')\r\n",
					"\r\n",
					"    def format_for_nhtsa_master(self):\r\n",
					"        # convert the long format returned by stored procedure to the wide format we use in NHTSA_Master\r\n",
					"        self.nhtsa_master_format = self.db_decode[[\"Code\", \"Value\"]].set_index('Code')\r\n",
					"        self.nhtsa_master_format = self.nhtsa_master_format.T # transpose\r\n",
					"        self.nhtsa_master_format['DOL_ModelYear'] = self.model_year\r\n",
					"        self.nhtsa_master_format['DOL_VINGroup'] = self.vin\r\n",
					"        self.nhtsa_master_format['Date_VINDecoded'] = self.date_decoded\r\n",
					"        self.nhtsa_master_format.reset_index(inplace=True, drop=True)\r\n",
					"        # next step deduplicates column names by effectively concatenating values from the duplicated columns\r\n",
					"        self.nhtsa_master_format = self.nhtsa_master_format.groupby(level=0, axis=1).apply(lambda x: x.apply(same_merge, axis=1))\r\n",
					"\r\n",
					"def write_to_database(list_of_individual_df, nhtsa_df_format, dbtable, dbengine):\r\n",
					"    # writing to database is an append\r\n",
					"    # there's no check on prior existence\r\n",
					"    tmp = pd.concat(list_of_individual_df, ignore_index=True)\r\n",
					"    vehicle_information = pd.concat([nhtsa_df_format, tmp])\r\n",
					"    vehicle_information.fillna(value='', inplace=True) # fields not returned will have empty string\r\n",
					"    vehicle_information.to_sql(dbtable, schema = 'dbo', con = dbengine, if_exists='append', index=False) # write to SQL server\r\n",
					"\r\n",
					"def main():\r\n",
					"    # parse command line arguments\r\n",
					"    parser = parse_args(sys.argv[1:])\r\n",
					"\r\n",
					"    # connect to db with VIN groups\r\n",
					"    # RAY\r\n",
					"    print(\"RAy:\")\r\n",
					"    print(type(cfg.databases))\r\n",
					"\r\n",
					"    # RAY - params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + cfg.databases['vin_group_server'] + \";DATABASE=\" + cfg.databases['vin_group_db'])\r\n",
					"    params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + cfg.databases['vin_group_server'] + \";DATABASE=\" + cfg.databases['vin_group_db']\r\n",
					"        + \";UID=sqladmin;PWD=abcd1234!\")\r\n",
					"    \r\n",
					"    engine = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"\r\n",
					"    print(\"********** ray  done\")\r\n",
					"\r\n",
					"    # read in VIN groups\r\n",
					"    vin_groups_to_decode = get_vin_groups(parser.decode_all_or_new, engine)\r\n",
					"    engine.dispose() # dispose\r\n",
					"    print(\"%s VINs will be decoded\" % vin_groups_to_decode['data'].shape[0])\r\n",
					"\r\n",
					"    print(\"Ray 44\")\r\n",
					"    \r\n",
					"    try:\r\n",
					"        # set up connections for decoding\r\n",
					"        params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + cfg.databases['nhtsa_server'] + \";DATABASE=\" + cfg.databases['nhtsa_db']\r\n",
					"             + \";UID=sqladmin;PWD=abcd1234!\")\r\n",
					"        engine_decoding = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"\r\n",
					"        print(\"Ray 55\")\r\n",
					"        \r\n",
					"        # set up connection for writing output\r\n",
					"        params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + cfg.databases['output_server'] + \";DATABASE=\" + cfg.databases['output_db'] \r\n",
					"            + \";UID=sqladmin;PWD=abcd1234!\")\r\n",
					"        engine_write = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params, use_setinputsizes=False)\r\n",
					"\r\n",
					"        print(\"Ray 66\")\r\n",
					"        \r\n",
					"        nhtsa_df_format = pd.DataFrame(columns=setup_nhtsa.nhtsa_columns) # initialize empty dataframe in the NHTSA_Master/Staging format\r\n",
					"\r\n",
					"        print(\"Ray 77\")\r\n",
					"        \r\n",
					"        lst = [] # empty list to hold the decoding returns\r\n",
					"        for row in range(len(vin_groups_to_decode['data'])):\r\n",
					"            # decode VIN\r\n",
					"            this_vin = VIN(vin_groups_to_decode['data'].loc[row, 'VINGroup'], vin_groups_to_decode['data'].loc[row,'ModelYear'].astype(str))\r\n",
					"            print(this_vin.vin, this_vin.model_year)\r\n",
					"            print()\r\n",
					"            this_vin.decode_against_database(engine_decoding)\r\n",
					"            this_vin.format_for_nhtsa_master()\r\n",
					"            lst.append(this_vin.nhtsa_master_format) # store the list of returns\r\n",
					"\r\n",
					"            if row % 500 == 0 and row != 0:\r\n",
					"                # save result\r\n",
					"                write_to_database(lst, nhtsa_df_format, cfg.databases['output_table'], engine_write)\r\n",
					"                lst = []\r\n",
					"                print('Wrote ' + str(row+1) + ' VIN decodes')\r\n",
					"\r\n",
					"        # Write any remainder to db\r\n",
					"        write_to_database(lst, nhtsa_df_format, cfg.databases['output_table'], engine_write)\r\n",
					"        print('Wrote ' + str(row+1) + ' VIN decodes')\r\n",
					"\r\n",
					"        print('Source of VIN groups: ', vin_groups_to_decode['source'])\r\n",
					"\r\n",
					"    except Exception as ex:\r\n",
					"        template = \"An exception of type {0} occurred. Arguments:\\n{1!r}\"\r\n",
					"        message = template.format(type(ex).__name__, ex.args)\r\n",
					"        print(message)\r\n",
					"\r\n",
					"if __name__ == '__main__':\r\n",
					"    main()\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}