{
	"name": "test_sqlalchemy_pyodbc",
	"properties": {
		"folder": {
			"name": "WA-DOL/NHTSA"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d10ada42-ae66-49c6-9acd-839a070adc39"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/rg-synapse-demo-001/providers/Microsoft.Synapse/workspaces/synw-demoworkspace-001/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://synw-demoworkspace-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Reference: https://www.cdata.com/kb/tech/spark-python-sqlalchemy.rst"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# %pip install sqlalchemy\r\n",
					"# %pip install pyodbc\r\n",
					"# %pip install langchain\r\n",
					"# %pip list"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import sqlalchemy\r\n",
					"import pandas as pd"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# engine = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"engine = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=tcp:ray-azuresql2-server.database.windows.net;DATABASE=RPOdataTEAM;UID=sqladmin;PWD=abcd1234!\")"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyodbc \r\n",
					"# Some other example server values are\r\n",
					"# server = 'localhost\\sqlexpress' # for a named instance\r\n",
					"# server = 'myserver,port' # to specify an alternate port\r\n",
					"server = 'tcp:ray-azuresql2-server.database.windows.net' \r\n",
					"database = 'RPOdataTEAM' \r\n",
					"username = 'sqladmin' \r\n",
					"password = 'abcd1234!' \r\n",
					"# ENCRYPT defaults to yes starting in ODBC Driver 18. It's good to always specify ENCRYPT=yes on the client side to avoid MITM attacks.\r\n",
					"cnxn = pyodbc.connect('DRIVER={ODBC Driver 18 for SQL Server};SERVER='+server+';DATABASE='+database+';ENCRYPT=yes;UID='+username+';PWD='+ password)\r\n",
					"cursor = cnxn.cursor()"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Sample select query\r\n",
					"# cursor.execute(\"SELECT @@version;\") \r\n",
					"cursor.execute(\"SELECT * from sys.tables;\") \r\n",
					"row = cursor.fetchone() \r\n",
					"while row: \r\n",
					"    print(row[0])\r\n",
					"    row = cursor.fetchone()"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"    mostRecentVinGroups = pd.read_sql_query(\"select * from sys.tables\", con = engine)"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"base = declarative_base()\r\n",
					"class Customers(base):\r\n",
					"\t__tablename__ = \"Customers\"\r\n",
					"\tCity = Column(String,primary_key=True)\r\n",
					"\tBalance = Column(String)\r\n",
					"\t..."
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"engine = create_engine(\"sparksql:///?Server=127.0.0.1\")\r\n",
					"factory = sessionmaker(bind=engine)\r\n",
					"session = factory()\r\n",
					"for instance in session.query(Customers).filter_by(Country=\"US\"):\r\n",
					"\tprint(\"City: \", instance.City)\r\n",
					"\tprint(\"Balance: \", instance.Balance)\r\n",
					"\tprint(\"---------\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Customers_table = Customers.metadata.tables[\"Customers\"]\r\n",
					"for instance in session.execute(Customers_table.select().where(Customers_table.c.Country == \"US\")):\r\n",
					"print(\"City: \", instance.City)\r\n",
					"print(\"Balance: \", instance.Balance)\r\n",
					"print(\"---------\")"
				],
				"execution_count": null
			}
		]
	}
}