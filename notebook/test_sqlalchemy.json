{
	"name": "test_sqlalchemy",
	"properties": {
		"folder": {
			"name": "WADOL"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool2",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "3",
				"spark.autotune.trackingId": "1784bfe8-9e31-4b4b-8655-bca0ca0390db"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/SynapseMgdVnet-Demo/providers/Microsoft.Synapse/workspaces/raysynapsemgdvnet/bigDataPools/SparkPool2",
				"name": "SparkPool2",
				"type": "Spark",
				"endpoint": "https://raysynapsemgdvnet.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool2",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Reference: https://www.cdata.com/kb/tech/spark-python-sqlalchemy.rst"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"%pip install sqlalchemy"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"\r\n",
					"import sqlalchemy"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"engine = create_engine(\"sparksql:///?Server=127.0.0.1\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"base = declarative_base()\r\n",
					"class Customers(base):\r\n",
					"\t__tablename__ = \"Customers\"\r\n",
					"\tCity = Column(String,primary_key=True)\r\n",
					"\tBalance = Column(String)\r\n",
					"\t..."
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"engine = create_engine(\"sparksql:///?Server=127.0.0.1\")\r\n",
					"factory = sessionmaker(bind=engine)\r\n",
					"session = factory()\r\n",
					"for instance in session.query(Customers).filter_by(Country=\"US\"):\r\n",
					"\tprint(\"City: \", instance.City)\r\n",
					"\tprint(\"Balance: \", instance.Balance)\r\n",
					"\tprint(\"---------\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Customers_table = Customers.metadata.tables[\"Customers\"]\r\n",
					"for instance in session.execute(Customers_table.select().where(Customers_table.c.Country == \"US\")):\r\n",
					"print(\"City: \", instance.City)\r\n",
					"print(\"Balance: \", instance.Balance)\r\n",
					"print(\"---------\")"
				],
				"execution_count": null
			}
		]
	}
}