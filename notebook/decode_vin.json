{
	"name": "decode_vin",
	"properties": {
		"folder": {
			"name": "New folder"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "7",
				"spark.autotune.trackingId": "42bcf6f9-f78c-4913-b5b5-d4c0a42d79c7",
				"spark.synapse.library.python.env": "name: nhtsa_decoding_db\r\nchannels:\r\n  - conda-forge\r\n  - defaults\r\ndependencies:\r\n  - alabaster=0.7.13=pyhd8ed1ab_0\r\n  - arrow=1.2.3=pyhd8ed1ab_0\r\n  - astroid=2.15.5=py311h1ea47a8_0\r\n  - asttokens=2.2.1=pyhd8ed1ab_0\r\n  - atomicwrites=1.4.1=pyhd8ed1ab_0\r\n  - attrs=23.1.0=pyh71513ae_1\r\n  - autopep8=2.0.2=pyhd8ed1ab_0\r\n  - babel=2.12.1=pyhd8ed1ab_1\r\n  - backcall=0.2.0=pyh9f0ad1d_0\r\n  - backports=1.0=pyhd8ed1ab_3\r\n  - backports.functools_lru_cache=1.6.4=pyhd8ed1ab_0\r\n  - bcrypt=3.2.2=py311ha68e1ae_1\r\n  - beautifulsoup4=4.12.2=pyha770c72_0\r\n  - binaryornot=0.4.4=py_1\r\n  - black=23.3.0=py311h1ea47a8_1\r\n  - bleach=6.0.0=pyhd8ed1ab_0\r\n  - brotlipy=0.7.0=py311ha68e1ae_1005\r\n  - bzip2=1.0.8=h8ffe710_4\r\n  - ca-certificates=2023.5.7=h56e8100_0\r\n  - certifi=2023.5.7=pyhd8ed1ab_0\r\n  - cffi=1.15.1=py311h7d9ee11_3\r\n  - chardet=5.1.0=py311h1ea47a8_0\r\n  - charset-normalizer=3.1.0=pyhd8ed1ab_0\r\n  - click=8.1.3=win_pyhd8ed1ab_2\r\n  - cloudpickle=2.2.1=pyhd8ed1ab_0\r\n  - colorama=0.4.6=pyhd8ed1ab_0\r\n  - comm=0.1.3=pyhd8ed1ab_0\r\n  - cookiecutter=2.1.1=pyh6c4a22f_0\r\n  - cryptography=40.0.2=py311h28e9c30_0\r\n  - debugpy=1.6.7=py311h12c1d0e_0\r\n  - decorator=5.1.1=pyhd8ed1ab_0\r\n  - defusedxml=0.7.1=pyhd8ed1ab_0\r\n  - diff-match-patch=20230430=pyhd8ed1ab_0\r\n  - dill=0.3.6=pyhd8ed1ab_1\r\n  - docstring-to-markdown=0.12=pyhd8ed1ab_0\r\n  - docutils=0.20.1=py311h1ea47a8_0\r\n  - entrypoints=0.4=pyhd8ed1ab_0\r\n  - exceptiongroup=1.1.1=pyhd8ed1ab_0\r\n  - executing=1.2.0=pyhd8ed1ab_0\r\n  - flake8=6.0.0=pyhd8ed1ab_0\r\n  - gettext=0.21.1=h5728263_0\r\n  - glib=2.76.2=h12be248_0\r\n  - glib-tools=2.76.2=h12be248_0\r\n  - greenlet=2.0.2=py311h12c1d0e_1\r\n  - gst-plugins-base=1.22.0=h001b923_2\r\n  - gstreamer=1.22.0=h6b5321d_2\r\n  - icu=72.1=h63175ca_0\r\n  - idna=3.4=pyhd8ed1ab_0\r\n  - imagesize=1.4.1=pyhd8ed1ab_0\r\n  - importlib-metadata=6.6.0=pyha770c72_0\r\n  - importlib_metadata=6.6.0=hd8ed1ab_0\r\n  - importlib_resources=5.12.0=pyhd8ed1ab_0\r\n  - inflection=0.5.1=pyh9f0ad1d_0\r\n  - iniconfig=2.0.0=pyhd8ed1ab_0\r\n  - intel-openmp=2023.1.0=h57928b3_46319\r\n  - intervaltree=3.1.0=pyhd8ed1ab_1\r\n  - ipykernel=6.23.1=pyh025b116_0\r\n  - ipython=8.13.2=pyh08f2357_0\r\n  - ipython_genutils=0.2.0=py_1\r\n  - isort=5.12.0=pyhd8ed1ab_1\r\n  - jaraco.classes=3.2.3=pyhd8ed1ab_0\r\n  - jedi=0.18.2=pyhd8ed1ab_0\r\n  - jellyfish=0.9.0=py311ha68e1ae_2\r\n  - jinja2=3.1.2=pyhd8ed1ab_1\r\n  - jinja2-time=0.2.0=pyhd8ed1ab_3\r\n  - jsonschema=4.17.3=pyhd8ed1ab_0\r\n  - jupyter_client=8.2.0=pyhd8ed1ab_0\r\n  - jupyter_core=5.3.0=py311h1ea47a8_0\r\n  - jupyterlab_pygments=0.2.2=pyhd8ed1ab_0\r\n  - keyring=23.13.1=py311h1ea47a8_0\r\n  - krb5=1.20.1=heb0366b_0\r\n  - lazy-object-proxy=1.9.0=py311ha68e1ae_0\r\n  - libblas=3.9.0=16_win64_mkl\r\n  - libcblas=3.9.0=16_win64_mkl\r\n  - libclang=16.0.3=default_h8b4101f_0\r\n  - libclang13=16.0.3=default_h45d3cf4_0\r\n  - libexpat=2.5.0=h63175ca_1\r\n  - libffi=3.4.2=h8ffe710_5\r\n  - libglib=2.76.2=he8f3873_0\r\n  - libhwloc=2.9.1=h51c2c0f_0\r\n  - libiconv=1.17=h8ffe710_0\r\n  - libjpeg-turbo=2.1.5.1=hcfcfb64_0\r\n  - liblapack=3.9.0=16_win64_mkl\r\n  - libogg=1.3.4=h8ffe710_1\r\n  - libpng=1.6.39=h19919ed_0\r\n  - libsodium=1.0.18=h8d14728_1\r\n  - libspatialindex=1.9.3=h39d44d4_4\r\n  - libsqlite=3.42.0=hcfcfb64_0\r\n  - libvorbis=1.3.7=h0e60522_0\r\n  - libwebp=1.3.0=hcfcfb64_0\r\n  - libwebp-base=1.3.0=hcfcfb64_0\r\n  - libxml2=2.10.4=hc3477c8_0\r\n  - libzlib=1.2.13=hcfcfb64_4\r\n  - markupsafe=2.1.2=py311ha68e1ae_0\r\n  - matplotlib-inline=0.1.6=pyhd8ed1ab_0\r\n  - mccabe=0.7.0=pyhd8ed1ab_0\r\n  - mistune=2.0.5=pyhd8ed1ab_0\r\n  - mkl=2022.1.0=h6a75c08_874\r\n  - more-itertools=9.1.0=pyhd8ed1ab_0\r\n  - mypy_extensions=1.0.0=pyha770c72_0\r\n  - nbclient=0.7.4=pyhd8ed1ab_0\r\n  - nbconvert=7.4.0=pyhd8ed1ab_0\r\n  - nbconvert-core=7.4.0=pyhd8ed1ab_0\r\n  - nbconvert-pandoc=7.4.0=pyhd8ed1ab_0\r\n  - nbformat=5.8.0=pyhd8ed1ab_0\r\n  - nest-asyncio=1.5.6=pyhd8ed1ab_0\r\n  - numpy=1.24.3=py311h0b4df5a_0\r\n  - numpydoc=1.5.0=pyhd8ed1ab_0\r\n  - openssl=3.1.0=hcfcfb64_3\r\n  - packaging=23.1=pyhd8ed1ab_0\r\n  - pandas=2.0.1=py311hf63dbb6_1\r\n  - pandoc=2.19.2=h57928b3_2\r\n  - pandocfilters=1.5.0=pyhd8ed1ab_0\r\n  - paramiko=3.1.0=pyhd8ed1ab_0\r\n  - parso=0.8.3=pyhd8ed1ab_0\r\n  - pathspec=0.11.1=pyhd8ed1ab_0\r\n  - pcre2=10.40=h17e33f8_0\r\n  - pexpect=4.8.0=pyh1a96a4e_2\r\n  - pickleshare=0.7.5=py_1003\r\n  - pip=23.1.2=pyhd8ed1ab_0\r\n  - pkgutil-resolve-name=1.3.10=pyhd8ed1ab_0\r\n  - platformdirs=3.5.1=pyhd8ed1ab_0\r\n  - pluggy=1.0.0=pyhd8ed1ab_5\r\n  - ply=3.11=py_1\r\n  - prompt-toolkit=3.0.38=pyha770c72_0\r\n  - prompt_toolkit=3.0.38=hd8ed1ab_0\r\n  - psutil=5.9.5=py311ha68e1ae_0\r\n  - pthreads-win32=2.9.1=hfa6e2cd_3\r\n  - ptyprocess=0.7.0=pyhd3deb0d_0\r\n  - pure_eval=0.2.2=pyhd8ed1ab_0\r\n  - pycodestyle=2.10.0=pyhd8ed1ab_0\r\n  - pycparser=2.21=pyhd8ed1ab_0\r\n  - pydocstyle=6.3.0=pyhd8ed1ab_0\r\n  - pyflakes=3.0.1=pyhd8ed1ab_0\r\n  - pygments=2.15.1=pyhd8ed1ab_0\r\n  - pylint=2.17.4=pyhd8ed1ab_0\r\n  - pylint-venv=3.0.1=pyhd8ed1ab_0\r\n  - pyls-spyder=0.4.0=pyhd8ed1ab_0\r\n  - pynacl=1.5.0=py311hd53affc_2\r\n  - pyodbc=4.0.39=py311h12c1d0e_0\r\n  - pyopenssl=23.1.1=pyhd8ed1ab_0\r\n  - pyqt=5.15.7=py311h125bc19_3\r\n  - pyqt5-sip=12.11.0=py311h12c1d0e_3\r\n  - pyqtwebengine=5.15.7=py311h5a77453_3\r\n  - pyrsistent=0.19.3=py311ha68e1ae_0\r\n  - pysocks=1.7.1=pyh0701188_6\r\n  - pytest=7.3.1=pyhd8ed1ab_0\r\n  - python=3.11.3=h2628c8c_0_cpython\r\n  - python-dateutil=2.8.2=pyhd8ed1ab_0\r\n  - python-fastjsonschema=2.16.3=pyhd8ed1ab_0\r\n  - python-lsp-black=1.2.1=pyhd8ed1ab_0\r\n  - python-lsp-jsonrpc=1.0.0=pyhd8ed1ab_0\r\n  - python-lsp-server=1.7.3=pyhd8ed1ab_0\r\n  - python-lsp-server-base=1.7.3=pyhd8ed1ab_0\r\n  - python-slugify=8.0.1=pyhd8ed1ab_0\r\n  - python-tzdata=2023.3=pyhd8ed1ab_0\r\n  - python_abi=3.11=3_cp311\r\n  - pytoolconfig=1.2.5=pyhd8ed1ab_0\r\n  - pytz=2023.3=pyhd8ed1ab_0\r\n  - pywin32=304=py311h12c1d0e_2\r\n  - pywin32-ctypes=0.2.0=py311h1ea47a8_1006\r\n  - pyyaml=6.0=py311ha68e1ae_5\r\n  - pyzmq=25.0.2=py311h7b3f143_0\r\n  - qdarkstyle=3.1=pyhd8ed1ab_0\r\n  - qstylizer=0.2.2=pyhd8ed1ab_0\r\n  - qt-main=5.15.8=h2c8576c_11\r\n  - qt-webengine=5.15.8=h5b1ea0b_0\r\n  - qtawesome=1.2.3=pyhd8ed1ab_0\r\n  - qtconsole=5.4.3=pyhd8ed1ab_0\r\n  - qtconsole-base=5.4.3=pyha770c72_0\r\n  - qtpy=2.3.1=pyhd8ed1ab_0\r\n  - requests=2.29.0=pyhd8ed1ab_0\r\n  - rope=1.8.0=pyhd8ed1ab_0\r\n  - rtree=1.0.1=py311hcacb13a_1\r\n  - setuptools=67.7.2=pyhd8ed1ab_0\r\n  - sip=6.7.9=py311h12c1d0e_0\r\n  - six=1.16.0=pyh6c4a22f_0\r\n  - snowballstemmer=2.2.0=pyhd8ed1ab_0\r\n  - sortedcontainers=2.4.0=pyhd8ed1ab_0\r\n  - soupsieve=2.3.2.post1=pyhd8ed1ab_0\r\n  - sphinx=7.0.1=pyhd8ed1ab_0\r\n  - sphinxcontrib-applehelp=1.0.4=pyhd8ed1ab_0\r\n  - sphinxcontrib-devhelp=1.0.2=py_0\r\n  - sphinxcontrib-htmlhelp=2.0.1=pyhd8ed1ab_0\r\n  - sphinxcontrib-jsmath=1.0.1=py_0\r\n  - sphinxcontrib-qthelp=1.0.3=py_0\r\n  - sphinxcontrib-serializinghtml=1.1.5=pyhd8ed1ab_2\r\n  - spyder=5.4.3=py311h1ea47a8_0\r\n  - spyder-kernels=2.4.3=win_pyhd8ed1ab_0\r\n  - sqlalchemy=2.0.13=py311ha68e1ae_0\r\n  - stack_data=0.6.2=pyhd8ed1ab_0\r\n  - tbb=2021.9.0=h91493d7_0\r\n  - text-unidecode=1.3=py_0\r\n  - textdistance=4.5.0=pyhd8ed1ab_0\r\n  - three-merge=0.1.1=pyh9f0ad1d_0\r\n  - tinycss2=1.2.1=pyhd8ed1ab_0\r\n  - tk=8.6.12=h8ffe710_0\r\n  - toml=0.10.2=pyhd8ed1ab_0\r\n  - tomli=2.0.1=pyhd8ed1ab_0\r\n  - tomlkit=0.11.8=pyha770c72_0\r\n  - tornado=6.3.2=py311ha68e1ae_0\r\n  - traitlets=5.9.0=pyhd8ed1ab_0\r\n  - typing-extensions=4.5.0=hd8ed1ab_0\r\n  - typing_extensions=4.5.0=pyha770c72_0\r\n  - tzdata=2023c=h71feb2d_0\r\n  - ucrt=10.0.22621.0=h57928b3_0\r\n  - ujson=5.7.0=py311h12c1d0e_0\r\n  - unidecode=1.3.6=pyhd8ed1ab_0\r\n  - urllib3=1.26.15=pyhd8ed1ab_0\r\n  - vc=14.3=hb25d44b_16\r\n  - vc14_runtime=14.34.31931=h5081d32_16\r\n  - vs2015_runtime=14.34.31931=hed1258a_16\r\n  - watchdog=3.0.0=py311h1ea47a8_0\r\n  - wcwidth=0.2.6=pyhd8ed1ab_0\r\n  - webencodings=0.5.1=py_1\r\n  - whatthepatch=1.0.5=pyhd8ed1ab_0\r\n  - wheel=0.40.0=pyhd8ed1ab_0\r\n  - win_inet_pton=1.1.0=pyhd8ed1ab_6\r\n  - wrapt=1.15.0=py311ha68e1ae_0\r\n  - xz=5.2.6=h8d14728_0\r\n  - yaml=0.2.5=h8ffe710_2\r\n  - yapf=0.33.0=pyhd8ed1ab_1\r\n  - zeromq=4.3.4=h0e60522_1\r\n  - zipp=3.15.0=pyhd8ed1ab_0\r\n  - zstd=1.5.2=h12be248_6\r\nprefix: C:\\Users\\FColdre240\\.conda\\envs\\nhtsa_decoding\r\n",
				"spark.synapse.library.python.env.name": "environment.yml"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/SynapseMgdVnet-Demo/providers/Microsoft.Synapse/workspaces/raysynapsemgdvnet/bigDataPools/SparkPool1",
				"name": "SparkPool1",
				"type": "Spark",
				"endpoint": "https://raysynapsemgdvnet.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# third party packages\r\n",
					"import sqlalchemy\r\n",
					"import pyodbc\r\n",
					"import pandas as pd\r\n",
					"import urllib\r\n",
					"import argparse # used by parse_args\r\n",
					"import sys\r\n",
					"import datetime\r\n",
					"import os\r\n",
					"\r\n",
					"# RAO files\r\n",
					"import setup_nhtsa # RAO defined file, from columns on 5/22\r\n",
					"import decoding_env_config as cfg # holds database info\r\n",
					"\r\n",
					"\r\n",
					"def parse_args(args):\r\n",
					"    # Setup reading arguments from command line\r\n",
					"    msg = \"Decodes VIN against NHTSA's database\"\r\n",
					"    parser = argparse.ArgumentParser(description = msg)\r\n",
					"    parser.add_argument('--decode_all_or_new', metavar='decode_all_or_new',\r\n",
					"                        choices=['all', 'new'],\r\n",
					"                        required=True,\r\n",
					"                        help='Specify which VIN Groups to decode: all, new. ')\r\n",
					"\r\n",
					"    return parser.parse_args(args)\r\n",
					"\r\n",
					"def get_vin_groups(all_or_new, dbengine):\r\n",
					"    \"\"\"\r\n",
					"    Assumes VIN groups always stored in a table named DRIVESVINGroups*\r\n",
					"    Get the table name of the most recently created DRIVESVINGroups_YYYYMMDD.\r\n",
					"\tThis helps us pick up aborted runs or test runs.\r\n",
					"    \"\"\"\r\n",
					"    mostRecentVinGroups = pd.read_sql_query(\"SELECT top 1 name \\\r\n",
					"                                        FROM sys.tables \\\r\n",
					"                                        WHERE name like 'DRIVESVINGroups%' \\\r\n",
					"                                        ORDER BY create_date DESC\", con = dbengine)\r\n",
					"    if(all_or_new == 'all'):\r\n",
					"        print('Getting VIN groups from ', mostRecentVinGroups.name[0])\r\n",
					"        query = \"SELECT DISTINCT VINGroup, ModelYear FROM \" + mostRecentVinGroups.name[0]\r\n",
					"    else:\r\n",
					"        print('Getting new VIN groups from ', mostRecentVinGroups.name[0])\r\n",
					"        query = \"SELECT DISTINCT vg.VINGroup, vg.ModelYear \\\r\n",
					"                FROM \" + mostRecentVinGroups.name[0] + \" AS vg \\\r\n",
					"                LEFT JOIN %s AS nr \\\r\n",
					"                    ON vg.VINGroup = nr.DOL_VINGroup \\\r\n",
					"                    AND vg.ModelYear = nr.DOL_ModelYear\\\r\n",
					"                WHERE nr.DOL_VINGroup IS NULL\" % cfg.databases['output_table']\r\n",
					"\r\n",
					"    vin_groups = {}\r\n",
					"    vin_groups['data'] = pd.read_sql_query(query, con = dbengine)\r\n",
					"    vin_groups['source'] = mostRecentVinGroups.name[0]\r\n",
					"\r\n",
					"    return vin_groups\r\n",
					"\r\n",
					"def same_merge(x): return ', '.join(x[x.notnull()].astype(str))\r\n",
					"    # helper to concatenate values from duplicate columns\r\n",
					"\r\n",
					"class VIN(object):\r\n",
					"    def __init__(self, vin, model_year):\r\n",
					"        self.vin = vin\r\n",
					"        self.model_year = model_year\r\n",
					"        self.db_decode = None\r\n",
					"        self.nhtsa_master_format = None\r\n",
					"        self.date_decoded = None\r\n",
					"\r\n",
					"    def decode_against_database(self, dbengine):\r\n",
					"        # decode against NHTSA's database\r\n",
					"        if int(self.model_year) >= 1981:\r\n",
					"            query = \"EXEC [dbo].[spVinDecode] @v = N'\" + self.vin + \"', @year = \" + self.model_year\r\n",
					"        else:\r\n",
					"            # some model years may not have been populated and are forced to low date year (1900)\r\n",
					"            query = \"EXEC [dbo].[spVinDecode] @v = N'\" + self.vin + \"'\"\r\n",
					"        self.db_decode = pd.read_sql_query(query, con = dbengine)\r\n",
					"        self.date_decoded = datetime.datetime.now().strftime('%Y%m%d %H:%M:%S')\r\n",
					"\r\n",
					"    def format_for_nhtsa_master(self):\r\n",
					"        # convert the long format returned by stored procedure to the wide format we use in NHTSA_Master\r\n",
					"        self.nhtsa_master_format = self.db_decode[[\"Code\", \"Value\"]].set_index('Code')\r\n",
					"        self.nhtsa_master_format = self.nhtsa_master_format.T # transpose\r\n",
					"        self.nhtsa_master_format['DOL_ModelYear'] = self.model_year\r\n",
					"        self.nhtsa_master_format['DOL_VINGroup'] = self.vin\r\n",
					"        self.nhtsa_master_format['Date_VINDecoded'] = self.date_decoded\r\n",
					"        self.nhtsa_master_format.reset_index(inplace=True, drop=True)\r\n",
					"        # next step deduplicates column names by effectively concatenating values from the duplicated columns\r\n",
					"        self.nhtsa_master_format = self.nhtsa_master_format.groupby(level=0, axis=1).apply(lambda x: x.apply(same_merge, axis=1))\r\n",
					"\r\n",
					"def write_to_database(list_of_individual_df, nhtsa_df_format, dbtable, dbengine):\r\n",
					"    # writing to database is an append\r\n",
					"    # there's no check on prior existence\r\n",
					"    tmp = pd.concat(list_of_individual_df, ignore_index=True)\r\n",
					"    vehicle_information = pd.concat([nhtsa_df_format, tmp])\r\n",
					"    vehicle_information.fillna(value='', inplace=True) # fields not returned will have empty string\r\n",
					"    vehicle_information.to_sql(dbtable, schema = 'dbo', con = dbengine, if_exists='append', index=False) # write to SQL server\r\n",
					"\r\n",
					"def main():\r\n",
					"    # parse command line arguments\r\n",
					"    parser = parse_args(sys.argv[1:])\r\n",
					"\r\n",
					"    # connect to db with VIN groups\r\n",
					"    params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + cfg.databases['vin_group_server'] + \";DATABASE=\" + cfg.databases['vin_group_db'])\r\n",
					"    engine = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"\r\n",
					"    # read in VIN groups\r\n",
					"    vin_groups_to_decode = get_vin_groups(parser.decode_all_or_new, engine)\r\n",
					"    engine.dispose() # dispose\r\n",
					"    print(\"%s VINs will be decoded\" % vin_groups_to_decode['data'].shape[0])\r\n",
					"\r\n",
					"    try:\r\n",
					"        # set up connections for decoding\r\n",
					"        params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + cfg.databases['nhtsa_server'] + \";DATABASE=\" + cfg.databases['nhtsa_db'])\r\n",
					"        engine_decoding = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params)\r\n",
					"\r\n",
					"        # set up connection for writing output\r\n",
					"        params = urllib.parse.quote_plus(\"DRIVER={SQL Server};SERVER=\" + cfg.databases['output_server'] + \";DATABASE=\" + cfg.databases['output_db'])\r\n",
					"        engine_write = sqlalchemy.create_engine(\"mssql+pyodbc:///?odbc_connect=%s\" % params, use_setinputsizes=False)\r\n",
					"        nhtsa_df_format = pd.DataFrame(columns=setup_nhtsa.nhtsa_columns) # initialize empty dataframe in the NHTSA_Master/Staging format\r\n",
					"\r\n",
					"        lst = [] # empty list to hold the decoding returns\r\n",
					"        for row in range(len(vin_groups_to_decode['data'])):\r\n",
					"            # decode VIN\r\n",
					"            this_vin = VIN(vin_groups_to_decode['data'].loc[row, 'VINGroup'], vin_groups_to_decode['data'].loc[row,'ModelYear'].astype(str))\r\n",
					"            print(this_vin.vin, this_vin.model_year)\r\n",
					"            print()\r\n",
					"            this_vin.decode_against_database(engine_decoding)\r\n",
					"            this_vin.format_for_nhtsa_master()\r\n",
					"            lst.append(this_vin.nhtsa_master_format) # store the list of returns\r\n",
					"\r\n",
					"            if row % 500 == 0 and row != 0:\r\n",
					"                # save result\r\n",
					"                write_to_database(lst, nhtsa_df_format, cfg.databases['output_table'], engine_write)\r\n",
					"                lst = []\r\n",
					"                print('Wrote ' + str(row+1) + ' VIN decodes')\r\n",
					"\r\n",
					"        # Write any remainder to db\r\n",
					"        write_to_database(lst, nhtsa_df_format, cfg.databases['output_table'], engine_write)\r\n",
					"        print('Wrote ' + str(row+1) + ' VIN decodes')\r\n",
					"\r\n",
					"        print('Source of VIN groups: ', vin_groups_to_decode['source'])\r\n",
					"\r\n",
					"    except Exception as ex:\r\n",
					"        template = \"An exception of type {0} occurred. Arguments:\\n{1!r}\"\r\n",
					"        message = template.format(type(ex).__name__, ex.args)\r\n",
					"        print(message)\r\n",
					"\r\n",
					"if __name__ == '__main__':\r\n",
					"    main()\r\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}