{
	"name": "Notebook 1",
	"properties": {
		"folder": {
			"name": "WA-DOL/Run Powershell"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3c403726-af25-43bd-94cf-92a71d9dbe07"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/rg-synapse-demo-001/providers/Microsoft.Synapse/workspaces/synw-demoworkspace-001/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://synw-demoworkspace-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import subprocess\r\n",
					"\r\n",
					"def run(self, cmd):\r\n",
					"    completed = subprocess.run([\"powershell\", \"-Command\", cmd], capture_output=True)\r\n",
					"    return completed\r\n",
					"\r\n",
					"if __name__ == '__main__':\r\n",
					"    hello_command = \"Write-Host 'Hello Wolrd!'\"\r\n",
					"    hello_info = run(hello_command)\r\n",
					"    if hello_info.returncode != 0:\r\n",
					"        print(\"An error occured: %s\", hello_info.stderr)\r\n",
					"    else:\r\n",
					"        print(\"Hello command executed successfully!\")\r\n",
					"    \r\n",
					"    print(\"-------------------------\")\r\n",
					"    \r\n",
					"    bad_syntax_command = \"Write-Hst 'Incorrect syntax command!'\"\r\n",
					"    bad_syntax_info = run(bad_syntax_command)\r\n",
					"    if bad_syntax_info.returncode != 0:\r\n",
					"        print(\"An error occured: %s\", bad_syntax_info.stderr)\r\n",
					"    else:\r\n",
					"        print(\"Bad syntax command executed successfully!\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import subprocess\r\n",
					"command='Write-Host(\"Installing module PSWindowsUpdate if not already installed...\")'\r\n",
					"subprocess.Popen('powershell -command '+\"'\"+command+\"'\")"
				],
				"execution_count": 6
			}
		]
	}
}