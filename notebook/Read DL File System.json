{
	"name": "Read DL File System",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool12",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "8b67b0b6-f057-4bbd-a159-b98b340712e7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/SynapseFromScratch-Demo/providers/Microsoft.Synapse/workspaces/synapsefromscratch/bigDataPools/SparkPool12",
				"name": "SparkPool12",
				"type": "Spark",
				"endpoint": "https://synapsefromscratch.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool12",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://dlsynapsefromscratchfs@dlsynapsefromscratchacct.dfs.core.windows.net/OR-BHDW/cannabis/Movies/3ACD603B-B8F7-4453-97B1-72E5D958B57F_95_0-1.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					"##, header=True\r\n",
					")\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install azure-storage-file-datalake\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.filedatalake import DataLakeServiceClient\r\n",
					"\r\n",
					"\r\n",
					"def list_files(storage_account_name, storage_account_key, file_system_name):\r\n",
					"    try:\r\n",
					"        service_client = DataLakeServiceClient(account_url=\"{}://{}.dfs.core.windows.net\".format(\r\n",
					"            \"https\", storage_account_name), credential=storage_account_key)\r\n",
					"\r\n",
					"        file_system_client = service_client.get_file_system_client(file_system_name)\r\n",
					"\r\n",
					"        paths = file_system_client.get_paths()\r\n",
					"\r\n",
					"        #for path in paths:\r\n",
					"        #    print(path.name)\r\n",
					"        file_system_client.create_file(\"testwritefile.txt\",\"ffff\")\r\n",
					"        \r\n",
					"    except Exception as e:\r\n",
					"        print(e)\r\n",
					"\r\n",
					"    return paths\r\n",
					"\r\n",
					"# Replace with your storage account name, key and file system name\r\n",
					"storage_account_name = \"dlsynapsefromscratchacct\"\r\n",
					"storage_account_key = \"cxvFE17krNK3949U6SfetjT0o64iAhpwUS2SuxWTWsD+fGrS1vubbVPpdtc4wHOIJete85T/yP0J+AStMONYxw==\"\r\n",
					"file_system_name = \"dlsynapsefromscratchfs\"\r\n",
					"\r\n",
					"fileList = list_files(storage_account_name, storage_account_key, file_system_name)\r\n",
					"type(fileList)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 18
			}
		]
	}
}