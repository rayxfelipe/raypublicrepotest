{
	"name": "Notebook 4",
	"properties": {
		"folder": {
			"name": "OR-DOT"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool11",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "e93d702d-9ae2-4a24-86a3-57ce3f073080"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/499bc654-f84c-46c2-952c-b30be508f78c/resourceGroups/SynapseFromScratch-Demo/providers/Microsoft.Synapse/workspaces/synapsefromscratch/bigDataPools/SparkPool11",
				"name": "SparkPool11",
				"type": "Spark",
				"endpoint": "https://synapsefromscratch.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool11",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://dlsynapsefromscratchfs@dlsynapsefromscratchacct.dfs.core.windows.net/OR-DOT/Odot_Sample.json', format='json')\r\n",
					"display(df.limit(10))\r\n",
					"\r\n",
					""
				],
				"execution_count": 111
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_json = df.toJSON()\r\n",
					"print(type(df_json))\r\n",
					""
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df2 = df.withColumn(\"name\")\r\n",
					"print(type(df2))\r\n",
					"print(df2[0:6])"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import from_json\r\n",
					"from pyspark.sql.types import MapType, StringType\r\n",
					"\r\n",
					"# Initialize SparkSession\r\n",
					"# spark = SparkSession.builder.appName('example').getOrCreate()\r\n",
					"\r\n",
					"# Suppose you have a DataFrame with a JSON string\r\n",
					"jsonString = \"{\\\"Zipcode\\\":704,\\\"ZipCodeType\\\":\\\"STANDARD\\\",\\\"City\\\":\\\"PARC PARQUE\\\",\\\"State\\\":\\\"PR\\\"}\"\r\n",
					"# jsonString = df_json\r\n",
					"df = spark.createDataFrame([(1, jsonString)], [\"id\", \"value\"])\r\n",
					"\r\n",
					"# Convert JSON string column to Map type\r\n",
					"df2 = df.withColumn(\"value\", from_json(df.value, MapType(StringType(), StringType())))\r\n",
					"\r\n",
					"# Show the DataFrame\r\n",
					"df2.show(truncate=False)"
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import from_json\r\n",
					"from pyspark.sql.types import MapType, StringType\r\n",
					"\r\n",
					"# Convert JSON string column to Map type\r\n",
					"df2 = df.withColumn(\"name\", from_json(df.name, MapType(StringType(), StringType())))\r\n",
					"\r\n",
					"# Show the DataFrame\r\n",
					"df2.show(truncate=False)\r\n",
					""
				],
				"execution_count": 67
			}
		]
	}
}